package com.miu_sample_test;

import java.util.ArrayList;
import java.util.List;

/**
 * Consider the following algorithm
 * - Start with a positive number n
 * - if n is even then divide by 2
 * - if n is odd then multiply by 3 and add 1
 * - continue this until n becomes 1
 * <p>
 * The Guthrie sequence of a positive number n is defined to be the numbers
 * generated by the above algorithm.
 * <p>
 * For example, the Guthrie sequence of the number
 * 7 is 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1
 * It is easy to see that this sequence was generated from the number 7 by
 * the above algorithm. Since 7 is odd multiply by 3 and add 1 to get 22 which
 * is the second number of the sequence. Since 22 is even, divide by 2 to get
 * 11 which is the third number of the sequence. 11 is odd so multiply by 3 and
 * add 1 to get 34 which is the fourth number of the sequence and so on.
 * <p>
 * Note: the first number of a Guthrie sequence is always the number that
 * generated the sequence and the last number is always 1.
 * <p>
 * Write a function named isGuthrieSequence which returns 1 if the elements of
 * the array form a Guthrie sequence. Otherwise, it returns 0.
 */
public class GuthrieSequence {

	public int isGuthrieSequence(int[] a) {
		if (a.length < 1) return 0;
		List<Integer> guthrieSequence = generateGuthrieSequence(a[0]);
		if (a.length != guthrieSequence.size()) return 0;
		for (int i = 0; i < a.length; i++) {
			if (a[i] != guthrieSequence.get(i)) return 0;
		}
		return 1;
	}

	List<Integer> generateGuthrieSequence(int num) {
		List<Integer> sequence = new ArrayList<>();
		sequence.add(num);
		while (num != 1) {
			if (num % 2 == 0) {
				num = num / 2;
			} else {
				num = num * 3 + 1;
			}
			sequence.add(num);
		}
		return sequence;
	}
}
